{"version":3,"sources":["../../lib/src/consts/common.ts","../../lib/src/states/reducers/layout.ts","../../lib/src/states/reducers/session.ts","../../lib/src/states/index.ts","routes/AuthRoute.tsx","pages/system/layout/Error.tsx","App.tsx","serviceWorker.ts","index.tsx","../../lib/src/states/apis/user.ts"],"names":["LoLang","layoutSlice","createSlice","name","initialState","navigatedJustBefore","reducers","navigated","state","setBaseUrl","headers","SESSION_KEY","stored","localStorage","getItem","Object","assign","token","expiryAt","JSON","parse","setDefaultHeaders","Authorization","Lang","KO","sessionSlice","signIn","action","payload","authToken","setItem","stringify","redirectTo","undefined","document","location","href","reload","signOut","removeItem","store","configureStore","reducer","layout","session","AuthRoute","props","authorizedOnly","denyRedirectTo","render","Component","component","rest","Comp","dispatch","useDispatch","available","console","log","api","userApi","getUserInfo","loading","className","error","err","code","actions","message","resp","to","pathname","from","ErrorLayout","AuthLayout","lazy","Layout","App","useStore","getState","fallback","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","getElementById","process","navigator","serviceWorker","ready","then","registration","unregister","catch","method","url","errReducer"],"mappings":"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","file":"static/js/main.8fba3e73.chunk.js","sourcesContent":["export enum LoLang {\n  EN = \"EN\",\n  KO = \"KO\",\n  JA = \"JA\",\n  ZH = \"ZH\",\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport interface LayoutState {\n  navigatedJustBefore: number;\n}\n\nconst initialState: LayoutState = { navigatedJustBefore: 0 };\n\nexport const layoutSlice = createSlice({\n  name: \"layout\",\n  initialState,\n  reducers: {\n    navigated(state) {\n      state.navigatedJustBefore = state.navigatedJustBefore + 1;\n    },\n  },\n});\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { setBaseUrl, setDefaultHeaders } from \"@coralblack/flax\";\nimport { LoLang } from \"../../consts/common\";\nimport { CreateAuthTokenResponse } from \"../../dto/auth\";\n\n// Set baseUrl\nsetBaseUrl(\"http://127.0.0.1\");\n\nexport interface SessionState {\n  token: string | null;\n  expiryAt: Date | null;\n}\n\nexport const SESSION_KEY = \"ff14-party-helper:auth\";\nconst stored = localStorage.getItem(SESSION_KEY);\n\nconst initialState: SessionState = Object.assign(\n  {\n    token: null,\n    expiryAt: null,\n  },\n  stored ? JSON.parse(stored) : {}\n);\n\nconst configurableDefaultHeaders = (headers?: { [key: string]: string }) =>\n  Object.assign(\n    {\n      Authorization: initialState.token,\n      Lang: LoLang.KO,\n    },\n    headers || {}\n  ) as { [key: string]: string };\n\nsetDefaultHeaders(configurableDefaultHeaders());\n\nexport const sessionSlice = createSlice({\n  name: \"session\",\n  initialState,\n  reducers: {\n    signIn(\n      state,\n      action: PayloadAction<{ redirectTo: string } & CreateAuthTokenResponse>\n    ) {\n      state.token = action.payload.authToken.token;\n      state.expiryAt = action.payload.authToken.expiryAt;\n\n      localStorage.setItem(\n        SESSION_KEY,\n        JSON.stringify({ ...state, redirectTo: undefined })\n      );\n\n      if (action.payload.redirectTo) {\n        document.location.href = action.payload.redirectTo;\n      } else {\n        document.location.reload();\n      }\n    },\n    signOut(state) {\n      state.token = null;\n      state.expiryAt = null;\n\n      localStorage.removeItem(SESSION_KEY);\n      document.location.href = \"/\";\n    },\n  },\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { layoutSlice } from \"./reducers/layout\";\nimport { sessionSlice } from \"./reducers/session\";\n\nexport const store = configureStore({\n  reducer: {\n    layout: layoutSlice.reducer,\n    session: sessionSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import { userApi } from \"@lib/states/apis/user\";\nimport { sessionSlice, SessionState } from \"@lib/states/reducers/session\";\nimport { useDispatch } from \"react-redux\";\nimport { Redirect, Route, RouteProps } from \"react-router-dom\";\nimport { FxGuard } from \"@coralblack/flax\";\n\ninterface AuthRouteProps extends RouteProps {\n  session: SessionState | null;\n  authorizedOnly?: boolean;\n  denyRedirectTo?: string;\n}\n\nexport function AuthRoute(props: AuthRouteProps) {\n  const { session, authorizedOnly, denyRedirectTo, render, component: Component, ...rest } = props;\n  const Comp: any = Component;\n  \n  const dispatch = useDispatch();\n  \n  const available =\n    (authorizedOnly === true && session && session.token) ||\n    (authorizedOnly === false && (!session || !session.token)) ||\n    (authorizedOnly === undefined && session && session.token)\n      ? true\n      : false;\n  \n  console.log(\"available :\", available);\n  console.log(\"render :\", render); \n  \n  return (\n    <>\n      <Route\n        {...rest}\n        render={props => \n          available ? (\n            render ? (\n              render(props)\n            ) : (\n              <>\n                {session && session.token && (\n                  <FxGuard\n                    key=\"static\"\n                    api={{ ...userApi.getUserInfo }}\n                    loading={() => <div className=\"app-spinner\" />}\n                    error={(err) => {\n                      if (err?.code === \"CREDENTIAL-INVALID\") {\n                        dispatch(sessionSlice.actions.signOut());\n                        return <>&nbsp;</>;\n                      }\n\n                      return (\n                        <>\n                          [{err?.code || \"UNKNOWN\"}] {err?.message || \"An error has occurred.\"}\n                        </>\n                      );\n                    }}\n                    render={resp =>  {\n                      console.log(resp);\n\n                      return <Comp />\n                    }\n                    }\n                  />\n                )}\n                {(!session || !session.token) && <Comp />}\n              </>\n            )\n          ) : (\n            <Redirect to={{ pathname: denyRedirectTo, state: { from: props.location }}} />\n          )\n        }\n      />\n    </>\n  );\n}","import React from \"react\";\nimport { Link, RouteProps } from \"react-router-dom\";\n\ninterface ErrorLayoutProps extends RouteProps {}\n\nexport function ErrorLayout(props: ErrorLayoutProps) {\n  return (\n    <>\n      <div className=\"app-layout\">\n        <div className=\"app-fullpage\">\n          <div className=\"app-content message\">\n            <i>sick</i>\n            <p>Page Not Found</p>\n            <Link to=\"/\">Go Home</Link>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { AuthRoute } from \"@routes/AuthRoute\";\nimport { lazy, Suspense } from \"react\";\nimport { RootState } from \"@lib/states\";\nimport { useStore } from \"react-redux\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport { ErrorLayout } from \"@pages/system/layout/Error\";\n\nconst AuthLayout = lazy(() => import(\"@pages/auth/layout/Auth\"));\nconst Layout = lazy(() => import(\"@layouts/Index\"));\n\nfunction App() {\n  const session = useStore<RootState>().getState().session;\n\n  console.log(\"session :\", session);\n\n  return (\n    <BrowserRouter>\n      <div className=\"app-wrapper\">\n        <Suspense\n          fallback={\n            <div className=\"suspense-loading\">\n              <div className=\"loading\">\n                <div className=\"loader\" />\n              </div>\n            </div>\n          }>\n          <Switch>\n            <Route exact={true} path=\"/404\" component={ErrorLayout} />\n            <AuthRoute session={session} authorizedOnly={false} path=\"/auth\" component={AuthLayout} />\n            <AuthRoute session={session} authorizedOnly={true} denyRedirectTo=\"/auth\" path=\"/\" component={Layout} />\n            <Redirect from=\"*\" to=\"/404\" />\n          </Switch>\n        </Suspense>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { store } from \"@lib/states\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./assets/style/index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nconsole && console.log && console.log(`> ${process.env.REACT_APP_STAGE}`);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { FxApiRequest } from \"@coralblack/flax\";\nimport { GetUserInfoResponse } from \"../../dto/user\";\nimport { ApiErrorResponse } from \"../../typings/api\";\n\nconst getUserInfo: FxApiRequest<GetUserInfoResponse, ApiErrorResponse> = {\n  method: \"GET\",\n  url: \"/user\",\n  reducer: (resp) => resp,\n  errReducer: (resp) => resp,\n};\n\nexport const userApi = { getUserInfo };\n"],"sourceRoot":""}